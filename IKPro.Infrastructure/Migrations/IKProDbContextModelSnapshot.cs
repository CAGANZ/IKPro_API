// <auto-generated />
using System;
using IKPro.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IKPro.Infrastructure.Migrations
{
    [DbContext(typeof(IKProDbContext))]
    partial class IKProDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IKPro.Domain.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ea1539a5-28df-4eef-9fb6-68756a9db09b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e21cafc7-3869-48be-a1f9-3a0fbab0d6fe",
                            Name = "SirketYonetici",
                            NormalizedName = "SIRKETYONETICI"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "b408d6e9-c192-4a4b-9dab-fdcc2187a4bc",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        });
                });

            modelBuilder.Entity("IKPro.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departman")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DogumTarihi")
                        .HasColumnType("date");

                    b.Property<string>("DogumYeri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fotograf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IkinciAdi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("IkinciSoyadi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("IseGirisTarih")
                        .HasColumnType("date");

                    b.Property<DateTime?>("IstenCikisTarihi")
                        .HasColumnType("date");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Maas")
                        .HasColumnType("money");

                    b.Property<string>("Meslek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SirketID")
                        .HasColumnType("int");

                    b.Property<string>("Soyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SirketID");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Adi = "Super",
                            Adres = "Root",
                            Aktif = true,
                            ConcurrencyStamp = "7ec2116a-6582-4e64-927b-88098d1d353d",
                            Departman = "admin",
                            DogumTarihi = new DateTime(2025, 8, 18, 4, 3, 59, 968, DateTimeKind.Local).AddTicks(1615),
                            DogumYeri = "tr",
                            Email = "pro@admin.com",
                            EmailConfirmed = false,
                            Fotograf = "foto.jpg",
                            IseGirisTarih = new DateTime(2025, 8, 18, 4, 3, 59, 968, DateTimeKind.Local).AddTicks(1634),
                            IstenCikisTarihi = new DateTime(2025, 8, 18, 4, 3, 59, 968, DateTimeKind.Local).AddTicks(1635),
                            LockoutEnabled = false,
                            Meslek = "Admin",
                            NormalizedEmail = "PRO@ADMIN.COM",
                            NormalizedUserName = "ADMINPRO",
                            PasswordHash = "AQAAAAIAAYagAAAAEP5FaKfcMsggAO3UgphUW+Swl6y+5Ef+5wSeyhw9owIrC+anGuzK3nRuxuXgOfbziA==",
                            PhoneNumber = "05555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "726ce810-97cd-4e51-a85e-f370b8ddf4ae",
                            Soyadi = "Admin",
                            TcNo = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "AdminPro"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Adi = "John",
                            Adres = "New York",
                            Aktif = true,
                            ConcurrencyStamp = "a91da9e4-08ba-4499-8488-dd822d411c4b",
                            Departman = "IT",
                            DogumTarihi = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DogumYeri = "us",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            Fotograf = "john_doe.jpg",
                            IseGirisTarih = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IstenCikisTarihi = new DateTime(2025, 8, 18, 4, 4, 0, 68, DateTimeKind.Local).AddTicks(6361),
                            LockoutEnabled = false,
                            Meslek = "Developer",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN_DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMg9BVWr1lrneNk6Wiv2LJd/2jMTnovRFVL4N8KVavQtG/JpyeX5gtqLKCKXL/pTSQ==",
                            PhoneNumber = "05555555556",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc0c81b1-c7fc-4593-91b4-643b44a0b969",
                            Soyadi = "Doe",
                            TcNo = "22222222222",
                            TwoFactorEnabled = false,
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Adi = "Jane",
                            Adres = "Los Angeles",
                            Aktif = false,
                            ConcurrencyStamp = "16b5489e-e747-4772-b944-49a1228959b0",
                            Departman = "HR",
                            DogumTarihi = new DateTime(1985, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DogumYeri = "us",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            Fotograf = "jane_smith.jpg",
                            IseGirisTarih = new DateTime(2010, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IstenCikisTarihi = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Meslek = "HR Specialist",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE_SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEDy2+qj2cxxARPTjcv56iksppbHkavQlqV2xAkialzu9ZYw+iMr7M1O7TeONebTzNA==",
                            PhoneNumber = "05555555557",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "602d5dbf-b7d0-495d-9ee1-3e5d2860a0fd",
                            Soyadi = "Smith",
                            TcNo = "33333333333",
                            TwoFactorEnabled = false,
                            UserName = "jane_smith"
                        });
                });

            modelBuilder.Entity("IKPro.Domain.Models.AvansTalep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("AvansTuru")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CevaplanmaTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<int>("OnayDurumu")
                        .HasColumnType("int");

                    b.Property<string>("ParaBirimi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("TalepTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<decimal>("Tutar")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AvansTalepleri");
                });

            modelBuilder.Entity("IKPro.Domain.Models.HarcamaTalep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CevaplanmaTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<string>("DosyaEkleme")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<string>("HarcamaTuru")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("OnayDurumu")
                        .HasColumnType("int");

                    b.Property<string>("ParaBirimi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("TalepTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<decimal>("Tutar")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("HarcamaTalepleri");
                });

            modelBuilder.Entity("IKPro.Domain.Models.IzinTalep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<DateTime>("BitisTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<DateTime?>("CevaplanmaTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<short>("GunSayisi")
                        .HasColumnType("smallint");

                    b.Property<string>("IzinTuru")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("OnayDurumu")
                        .HasColumnType("int");

                    b.Property<DateTime>("TalepTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("IzinTalepleri");
                });

            modelBuilder.Entity("IKPro.Domain.Models.Paket", b =>
                {
                    b.Property<int>("PaketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaketID"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<decimal>("Fiyat")
                        .HasMaxLength(50)
                        .HasColumnType("money");

                    b.Property<int>("KullaniciSayisi")
                        .HasColumnType("int");

                    b.Property<string>("PaketAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("PaketSuresi")
                        .HasColumnType("int");

                    b.Property<string>("ParaBirimi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("YayindanKaldirilmaTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<DateTime>("YayinlanmaTarihi")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.HasKey("PaketID");

                    b.ToTable("Paketler");

                    b.HasData(
                        new
                        {
                            PaketID = 1,
                            Aktif = true,
                            Fiyat = 799.99m,
                            KullaniciSayisi = 500,
                            PaketAdi = "Business Paket",
                            PaketSuresi = 24,
                            ParaBirimi = "TRY",
                            YayindanKaldirilmaTarihi = new DateTime(2026, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YayinlanmaTarihi = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IKPro.Domain.Models.Sirket", b =>
                {
                    b.Property<int>("SirketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SirketID"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CalisanSayisi")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<short>("KurulusYili")
                        .HasMaxLength(50)
                        .HasColumnType("smallint");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("PaketID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SozlesmeBaslangic")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<DateTime>("SozlesmeBitis")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Unvan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("VergiDairesi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("VergiNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("SirketID");

                    b.HasIndex("PaketID");

                    b.ToTable("Sirketler");

                    b.HasData(
                        new
                        {
                            SirketID = 1,
                            Ad = "x",
                            Adres = "Kadıköy",
                            Aktif = true,
                            CalisanSayisi = 4,
                            Email = "sirket@mail.com",
                            KurulusYili = (short)2024,
                            Logo = "logo.png",
                            MersisNo = "12345678901",
                            PaketID = 1,
                            SozlesmeBaslangic = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SozlesmeBitis = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telefon = "11111111111",
                            Unvan = "LTD",
                            VergiDairesi = "Kadıköy Vergi Dairesi",
                            VergiNo = "123412341234"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IKPro.Domain.Models.AppUser", b =>
                {
                    b.HasOne("IKPro.Domain.Models.Sirket", "Sirket")
                        .WithMany("Users")
                        .HasForeignKey("SirketID");

                    b.Navigation("Sirket");
                });

            modelBuilder.Entity("IKPro.Domain.Models.AvansTalep", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppUser", "AppUser")
                        .WithMany("avansTalepleri")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("IKPro.Domain.Models.HarcamaTalep", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppUser", "AppUser")
                        .WithMany("harcamaTalepleri")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("IKPro.Domain.Models.IzinTalep", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppUser", "AppUser")
                        .WithMany("izinTalepleri")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("IKPro.Domain.Models.Sirket", b =>
                {
                    b.HasOne("IKPro.Domain.Models.Paket", "Paket")
                        .WithMany("Sirketler")
                        .HasForeignKey("PaketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IKPro.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("IKPro.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IKPro.Domain.Models.AppUser", b =>
                {
                    b.Navigation("avansTalepleri");

                    b.Navigation("harcamaTalepleri");

                    b.Navigation("izinTalepleri");
                });

            modelBuilder.Entity("IKPro.Domain.Models.Paket", b =>
                {
                    b.Navigation("Sirketler");
                });

            modelBuilder.Entity("IKPro.Domain.Models.Sirket", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
